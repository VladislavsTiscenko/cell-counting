{"version":3,"sources":["webpack:///src/environments/environment.ts","webpack:///src/app/results/results.component.ts","webpack:///src/app/results/results.component.html","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["environment","production","floatValidator","control","Number","isNaN","parseFloat","value","includes","notfloat","ResultsComponent","_images","squares","nx","ny","vialForm","volSusp","required","vialSize","maxConc","valueChanges","subscribe","x","valid","numcells","conc","maxcells","vials","Math","ceil","usedVials","dilutantVolume","dilutantPerVial","toFixed","y","width","height","aw","floor","ah","i","ix","iy","image","a","Array","fill","checkArea","push","multiplier","avg","reduce","b","length","max","min","squareD","map","diff","avgSquareD","stdev","sqrt","round","images","errors","some","error","loading","every","isLoaded","updateSquares","get","selector","templateUrl","styleUrls","currId","CellImage","src","fileName","sanitizer","file","id","bypassSecurityTrustUrl","AppComponent","http","title","selectedImage","undefined","filter","val","arr","event","addedFiles","toLoad","type","split","pop","toLowerCase","name","img","Image","URL","createObjectURL","onerror","onload","newImg","getDefaultSelectedImage","requestSquares","formData","FormData","setTimeout","append","toString","post","res","index","parseInt","Object","keys","removeAll","imgCanvas","context","drawImage","_image","strokeStyle","square","beginPath","rect","stroke","canvas","nativeElement","getContext","renderImage","realImage","changingThisBreaksApplicationSecurity","template","styles","AppModule","declarations","imports","providers","bootstrap","bootstrapModule","err","console","webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","module","exports"],"mappings":"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","file":"main-es5.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, Input, OnInit } from '@angular/core';\nimport { CellImage } from '../app.component';\nimport { FormControl, FormGroup, Validators, ValidatorFn, AbstractControl } from '@angular/forms';\n\nexport function floatValidator(): ValidatorFn {\n  return (control: AbstractControl): {[key: string]: any} | null => {\n    return (Number.isNaN(parseFloat(control.value)) || control.value.includes(',')) ? {notfloat: {value: control.value}} : null;\n  };\n}\n\n@Component({\n  selector: 'app-results',\n  templateUrl: './results.component.html',\n  styleUrls: ['./results.component.css']\n})\n\nexport class ResultsComponent implements OnInit {\n\n  public _images: CellImage[] = [];\n  public squares: number[] = [];\n\n  public conc: number;\n  public max: number;\n  public min: number;\n  public avg: number;\n  public stdev: number;\n\n  public errors: boolean;\n  public loading: boolean;\n\n  public usedVials: number;\n  public dilutantVolume: number;\n  public dilutantPerVial: string;\n\n  vialForm: FormGroup;\n\n  private nx: number = 4;\n  private ny: number = 4;\n\n  @Input() set images(images: CellImage[]) {\n\n    this._images = images;\n    if (images.length > 0) {\n\n      this.errors = images.some((image) => {\n        return image.error;\n      });\n      this.loading = !images.every((image) => {\n        return image.isLoaded();\n      });\n      if (!this.errors && !this.loading)\n        this.updateSquares();\n\n    }\n\n  }\n\n  ngOnInit() {\n\n    this.vialForm = new FormGroup({\n\n      volSusp: new FormControl('', [Validators.required, floatValidator()]),\n      vialSize: new FormControl('10', [Validators.required, floatValidator()]),\n      maxConc: new FormControl('50000', [Validators.required, floatValidator()]),\n\n    });\n    this.vialForm.valueChanges.subscribe((x) => {\n      if (this.vialForm.valid) {\n\n          const numcells = this.conc * parseFloat(x.volSusp);\n          const maxcells = parseFloat(x.maxConc) * parseFloat(x.vialSize);\n          var vials = Math.ceil(parseFloat(x.volSusp)/parseFloat(x.vialSize));\n          while (numcells/vials > maxcells)\n            vials += 1\n\n          this.usedVials = vials;\n          this.dilutantVolume =  vials*parseFloat(x.vialSize)-parseFloat(x.volSusp);\n          this.dilutantPerVial = (this.dilutantVolume/this.usedVials).toFixed(2);\n\n        }\n    });\n\n  }\n\n  constructor() {}\n\n  checkArea(x, y) {\n\n    const width = 2048;\n    const height = 1536;\n\n    const aw = Math.floor(width/this.nx);\n    const ah = Math.floor(height/this.ny);\n    for (let i = 0; i < this.ny*this.nx; i++) {\n      const ix = i%this.nx\n      const iy = Math.floor(i/this.nx);\n      if (ix*aw <= x && (ix+1)*aw > x && iy*ah <= y && (iy+1)*ah > y)\n          return i\n    }\n\n    return 0;\n\n  }\n\n\n  updateSquares() {\n\n    this.squares = [];\n    for (const image of this._images) {\n\n      const a = Array(this.nx*this.ny).fill(0);\n      for (const [x,y] of image.squares)\n          a[this.checkArea(x,y)] += 1\n      this.squares.push(...a);\n\n    }\n\n    const multiplier = 11040;\n\n    this.avg = this.squares.reduce((a,b)=>a+b)/this.squares.length;\n    this.max = Math.max(...this.squares);\n    this.min = Math.min(...this.squares);\n\n    const squareD = this.squares.map((value) => {\n      var diff = value - this.avg;\n      return diff * diff;\n    });\n\n    const avgSquareD = squareD.reduce((a,b)=>a+b)/(squareD.length-1);\n\n    this.stdev = parseFloat(Math.sqrt(avgSquareD).toFixed(2));\n    this.conc = Math.round(this.avg*multiplier);\n    this.avg = parseFloat(this.avg.toFixed(2));\n\n  }\n\n  get volSusp() { return this.vialForm.get('volSusp'); }\n  get vialSize() { return this.vialForm.get('vialSize'); }\n  get maxConc() { return this.vialForm.get('maxConc'); }\n\n\n}\n","<div *ngIf=\"errors\">\n<h1>You have errors</h1>\n<h2>Please fix the errors in the images</h2>\n</div>\n\n<div *ngIf=\"loading&& !errors\">\n<h1>Loading results...</h1>\n<h2>Please wait a second...</h2>\n</div>\n\n<div *ngIf=\"!loading && !errors\">\n\n<h1>Measurement results</h1>\n\n<h2>Estimated cell concentration</h2>\n<h3>{{conc}} cells/ml</h3>\n\n<h2>Cells per 16th of image</h2>\n\n<p>\nAverage: {{avg}}<br/>\nMaximum: {{max}}<br/>\nMinimum: {{min}}<br/>\nSt. dev.: {{stdev}}<br/><br/>\n{{_images.length}} images, {{squares.length}} rectangles</p>\n\n<h2>Cell distribution into vials</h2>\n\n<div [formGroup]=\"vialForm\" #formDir=\"ngForm\">\n\n  <mat-form-field appearance=\"standard\">\n    <mat-label>Volume of suspension (ml)</mat-label>\n    <input matInput placeholder=\"25.0\" formControlName=\"volSusp\">\n    <mat-error *ngIf=\"(volSusp.dirty || volSusp.touched) && volSusp.invalid && volSusp.errors.notfloat\">Not a decimal with a dot as separator.</mat-error>\n  </mat-form-field><br/>\n\n  <mat-form-field appearance=\"standard\">\n    <mat-label>Size of vials (ml)</mat-label>\n    <input matInput placeholder=\"10.0\" formControlName=\"vialSize\">\n    <mat-error *ngIf=\"(vialSize.dirty || vialSize.touched) && vialSize.invalid && vialSize.errors.notfloat\">Not a decimal with a dot as separator.</mat-error>\n  </mat-form-field><br/>\n\n  <mat-form-field appearance=\"standard\">\n    <mat-label>Max concentration in vial (cells/ml)</mat-label>\n    <input matInput placeholder=\"50000\" formControlName=\"maxConc\">\n    <mat-error *ngIf=\"(maxConc.dirty || maxConc.touched) && maxConc.invalid && maxConc.errors.notfloat\">Not a decimal with a dot as separator.</mat-error>\n  </mat-form-field><br/>\n\n  <p *ngIf=\"vialForm.valid\">\n    Used vials: {{usedVials}}<br/>\n    Dilutant volume: {{dilutantVolume}} ml<br/>\n    Dilutant per vial: {{dilutantPerVial}} ml<br/>\n  </p>\n\n  <p *ngIf=\"!vialForm.valid\" style=\"max-width: 200px;\">\n    To calculate the optimal way to distribute cells into vials, please enter the above parameters with a dot (.) decimal separator.\n  </p>\n\n</div>\n\n</div>\n","import { AfterViewInit, Component, ElementRef, Input, ViewChild } from '@angular/core';\nimport { DomSanitizer, SafeUrl } from '@angular/platform-browser';\nimport { HttpClient } from '@angular/common/http';\n\nlet currId = 0;\n\nexport class CellImage {\n\n  public src: string;\n  public squares: number[][];\n  public error: string;\n  public fileName: string;\n  public file: File;\n  public id: number;\n  private sanitizer: DomSanitizer;\n\n  constructor(src: string, fileName: string, error?: string, sanitizer?: DomSanitizer, file?: File) {\n\n    this.src = src;\n    this.fileName = fileName;\n    this.id = currId;\n    currId += 1;\n    if (error && fileName)\n      this.error = error;\n    else {\n      this.sanitizer = sanitizer;\n      this.file = file;\n    }\n\n  }\n\n  public isLoaded(): boolean {\n\n    if (!this.squares)\n      return false;\n    else\n      return true;\n\n  }\n\n  public getSrc(): SafeUrl {\n\n    return this.sanitizer.bypassSecurityTrustUrl(this.src);\n\n  }\n\n}\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\n\nexport class AppComponent {\n\n  title = 'app-frontend';\n\n  images: CellImage[] = [];\n  selectedImage: CellImage;\n  http: HttpClient;\n  sanitizer: DomSanitizer;\n\n  constructor(http: HttpClient, sanitizer: DomSanitizer) {\n\n    this.http = http;\n    this.sanitizer = sanitizer;\n    this.selectedImage = new CellImage(\"\", \"\", undefined, sanitizer);\n\n  }\n\n  getStyle() {\n\n    return \n    \n  }\n\n  getDefaultSelectedImage() {\n\n    return this.images.filter((val, i, arr) => {\n      return !val.error;\n    })[0];\n\n  }\n\n  onSelectFiles(event) {\n\n    if (event.addedFiles.length == 0)\n      return;\n\n    var toLoad = [];\n\n    for (var i = 0; i < event.addedFiles.length; i++) {\n\n      const file = event.addedFiles[i];\n\n      if (file.type.split('/').pop().toLowerCase() != \"bmp\") {\n        this.images.push(new CellImage(undefined, file.name, \"Incorrect file format.\"));\n        this.images = [...this.images]; // Update Setter\n        continue;\n      }\n\n      const img = new Image();\n      img.src = URL.createObjectURL(file);\n\n      img.onerror = () => {\n\n        this.images.push(new CellImage(undefined, file.name, \"Image is unreadable.\"));\n        this.images = [...this.images]; // Update Setter\n\n\n      };\n\n      img.onload = () => {\n\n        if (img.width != 2048 || img.height != 1536) {\n\n          this.images.push(new CellImage(undefined, file.name, \"Image resolutions incorrect.\"));\n          this.images = [...this.images]; // Update Setter\n\n        } else {\n\n          const newImg = new CellImage(img.src, file.name, undefined, this.sanitizer, file);\n          this.images.push(newImg);\n          this.selectedImage = this.getDefaultSelectedImage();\n          toLoad.push(newImg);\n          if (file == event.addedFiles[event.addedFiles.length-1]) {\n            this.images = [...this.images]; // Update Setter\n            this.requestSquares(toLoad);\n          }\n\n        }\n\n      };\n\n    }\n\n  }\n\n  requestSquares(toLoad) {\n\n    const formData = new FormData();\n\n    setTimeout(() => {\n\n      for (const image of toLoad) {\n\n        formData.append(image.id.toString(), image.file);\n\n      }\n\n      this.http.post('/api/inference', formData).subscribe(res => {\n\n        for (const index of Object.keys(res))\n          this.images.filter((img, i, arr) => {\n            return img.id === parseInt(index);\n          })[0].squares = res[index];\n\n        this.images = [...this.images]; // Update Setter\n\n      });\n\n    }, 2000);\n\n  }\n\n  removeImage(id) {\n\n    if (this.images.length == 1)\n      this.removeAll();\n    else {\n\n      this.images = this.images.filter((img, i, arr) => {\n        return img.id != id;\n      });\n      if (!this.images.includes(this.selectedImage))\n        this.selectedImage = this.getDefaultSelectedImage();\n\n    }\n\n  }\n\n  removeAll() {\n\n    this.images = [];\n    this.selectedImage = new CellImage(\"\", \"\", undefined, this.sanitizer);\n\n  }\n\n  selectImage(id) {\n\n    this.selectedImage = this.images.filter((img, i, arr) => {\n      return img.id == id;\n    })[0];\n\n  }\n\n}\n\n@Component({\n  selector: 'img-canvas',\n  template: '<canvas #imgCanvas class=\"canvas\" width=\"533\" height=\"400\"></canvas>',\n  styles: ['.canvas { width: 100%; height: 100%; }'],\n})\nexport class imgCanvas implements AfterViewInit {\n \n @ViewChild('imgCanvas')\n canvas: ElementRef<HTMLCanvasElement>;\n\n public context: CanvasRenderingContext2D;\n private _image: CanvasImageSource;\n private squares: any;\n\n private nx: number = 4;\n private ny: number = 4;\n\n private width: number = 533;\n private height: number = 400;\n\n renderImage() {\n  if (this.context) {\n\n    this.context.drawImage(this._image, 0, 0, this.width, this.height);\n    if (this.squares) {\n      this.context.strokeStyle = \"lime\";\n      for (const square of this.squares) {\n        this.context.beginPath();\n        const x = square[0]/2048*533;\n        const y = square[1]/1536*400;\n        this.context.rect(x, y, 7, 7);\n        this.context.stroke();\n      }\n\n      const aw = Math.floor(this.width/this.nx);\n      const ah = Math.floor(this.height/this.ny);\n      this.context.strokeStyle = \"lightgray\";\n\n      for (let i = 0; i < this.ny*this.nx; i++) {\n        const ix = i%this.nx\n        const iy = Math.floor(i/this.nx);\n\n        //if (ix*aw <= x && (ix+1)*aw > x && iy*ah <= y && (iy+1)*ah > y)\n        //    return i\n\n        this.context.beginPath();\n        this.context.rect(ix*aw, iy*ah, aw, ah);\n        this.context.stroke();\n      }\n    }\n  }\n }\n\n ngAfterViewInit(): void {\n  this.context = this.canvas.nativeElement.getContext('2d');\n  this.renderImage();\n }\n\n @Input() set image([image, squares]: any) {\n    const realImage = new Image();\n    realImage.src = (image.changingThisBreaksApplicationSecurity);\n    this._image = realImage;\n    this.squares = squares;\n    this.renderImage();\n }\n\n}","<mat-toolbar color=\"primary\" class=\"header\">\n\n  <span>cell counting app</span>\n  <span class=\"example-spacer\"></span>\n  <button *ngIf=\"images.length > 0\" mat-icon-button aria-label=\"Reset session\" (click)=\"removeAll()\">\n    <mat-icon>close</mat-icon>\n  </button>\n\n</mat-toolbar>\n\n<div class=\"content\">\n\n  <ngx-dropzone *ngIf=\"images.length == 0\" (change)=\"onSelectFiles($event)\" class=\"init-dropzone\">\n      <ngx-dropzone-label>\n        <span style=\"font-size: 24px;\">Drag and drop images here</span><br/>\n        or click to open dialog\n      </ngx-dropzone-label>\n  </ngx-dropzone>\n\n  <div *ngIf=\"images.length != 0\" class=\"container\">\n\n    <div class=\"view-container\">\n\n      <div class=\"selected-image-container card\">\n        <img-canvas [image]=\"[selectedImage.getSrc(), selectedImage.squares]\"></img-canvas>\n      </div>\n\n      <div class=\"image-gallery card\">\n        <div class=\"gallery-cards-container\">\n          <div class=\"image-card card\" *ngFor=\"let image of images\">\n            <div class=\"image-card-content\">\n              <img *ngIf=\"!image.error\" [src]=\"image.getSrc()\" (click)=\"selectImage(image.id)\"/>\n              <div *ngIf=\"image.error\" class=\"image-card-caption\">Error on {{image.fileName}}. {{image.error}}</div>\n              <div *ngIf=\"!image.error\" class=\"image-card-caption\">{{image.fileName}}<span *ngIf=\"!image.isLoaded()\"> (loading)</span><b *ngIf=\"image == selectedImage\"> (selected)</b></div>\n              <button class=\"image-card-close-btn\" mat-icon-button (click)=\"removeImage(image.id)\">\n                <mat-icon>close</mat-icon>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <ngx-dropzone (change)=\"onSelectFiles($event)\" class=\"view-dropzone\">\n        <ngx-dropzone-label>\n          <span style=\"font-size: 20px;\">Drag and drop images to add</span><br/>\n          or click to open dialog\n        </ngx-dropzone-label>\n      </ngx-dropzone>\n\n    </div>\n\n    <div class=\"results-container card\">\n      <app-results [images]=\"images\"></app-results>\n    </div>\n\n  </div>\n\n</div>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\n\nimport { AppComponent, imgCanvas } from './app.component';\n\nimport { NgxDropzoneModule } from 'ngx-dropzone';\nimport { HttpClientModule } from '@angular/common/http';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { ResultsComponent } from './results/results.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ResultsComponent,\n    imgCanvas\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    BrowserAnimationsModule,\n    NgxDropzoneModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatButtonModule,\n    MatFormFieldModule,\n    MatInputModule,\n    FormsModule,\n    ReactiveFormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}